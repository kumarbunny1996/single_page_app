/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//global variable\n\nvar searchInput;\nvar successMsg;\nvar errorMsg;\n\n//this gets content from file\nfunction getContent(fragmentId, callback) {\n\n    //creating Xhr Object to asynchronously request\n    var xhr = new XMLHttpRequest();\n\n    //creating connection to file\n    xhr.open('GET', fragmentId + '.html', true);\n\n    //this gets the content from the given path\n    xhr.onload = function () {\n        if (this.status == 200) {\n            callback(this.responseText);\n        }\n    };\n\n    //sending the request to server\n    xhr.send();\n}\n\n//main function to navigate links\nvar navigate = function navigate() {\n    //hash used to get the links\n    console.log(location.hash);\n\n    //substr method deletes the # symbol in fragments\n    var fragmentId = location.hash.substr(1);\n\n    // display the output to browser\n    getContent(fragmentId, function (content) {\n        document.getElementById('content').innerHTML = content;\n        if (fragmentId === 'add') {\n            Events.addEvent();\n            getInputEvents();\n        }\n        if (fragmentId === 'friends') {\n            UI.displayFriends();\n        }\n        if (fragmentId === 'home') {\n            Events.searchEvent();\n            Events.searchInputEvent();\n        }\n        if (document.querySelector('.pop-container')) {\n            var popBox = document.querySelector('.pop-container');\n            document.body.removeChild(popBox);\n        }\n        if (document.querySelector('.clearDiv')) {\n            var clearDiv = document.querySelector('.clearDiv');\n            document.body.removeChild(clearDiv);\n        }\n        if (document.querySelector('.no-friends')) {\n            var noFriendsDiv = document.querySelector('.no-friends');\n            document.body.removeChild(noFriendsDiv);\n        }\n    });\n};\nnavigate();\n\n//keeping  home as default page\nif (!location.hash) {\n    location.hash = '#home';\n}\n\n//event listener for changing fragmentId in url\nwindow.addEventListener('hashchange', navigate);\n\n//this sends data to the server \nvar addFriend = function addFriend(e) {\n\n    //event listener to button\n    console.log('button is clicked');\n    e.preventDefault();\n    validateFunc();\n};\n//Check the inputs and set the pattern\nfunction getInputEvents() {\n    var name = document.getElementById('name');\n    var age = document.getElementById('age');\n    var email = document.getElementById('email');\n    var group = document.getElementById('group');\n\n    name.addEventListener('keyup', function (e) {\n        return checkName(e.target.value);\n    });\n    age.addEventListener('keyup', function (e) {\n        return checkAge(e.target.value);\n    });\n    email.addEventListener('keyup', function (e) {\n        return checkEmail(e.target.value);\n    });\n    group.addEventListener('keyup', function (e) {\n        return checkGroup(e.target.value);\n    });\n}\n\n//regex\nvar nameRe = /^[a-zA-Z\\s]{2,15}$/; //name\nvar ageRe = /^[0-9]{1,2}$/; //age\nvar emailRe = /^([a-zA-Z0-9_\\-\\.\\#\\$\\%\\&\\*\\^\\!]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-z]{2,5})$/;\nvar groupRe = /^[a-zA-Z\\-\\s]{2,25}$/;\n\nfunction checkName(value) {\n    var div = document.querySelector('#invalid-name');\n    var name = value;\n    console.log(value);\n    //console.log(e.target);\n    if (!nameRe.test(name)) {\n        div.style.display = 'block';\n    } else {\n        div.style.display = 'none';\n    }\n}\n\nfunction checkAge(value) {\n    var div = document.querySelector('#invalid-age');\n    //let size = document.querySelector('#age').getAttribute('size');\n    var age = value;\n    console.log(value);\n    if (!ageRe.test(age)) {\n        div.style.display = 'block';\n    } else {\n        div.style.display = 'none';\n    }\n}\n\nfunction checkEmail(value) {\n    var div = document.querySelector('#invalid-email');\n    var email = value;\n    if (!emailRe.test(email)) {\n        div.style.display = 'block';\n    } else {\n        div.style.display = 'none';\n    }\n}\n\nfunction checkGroup(value) {\n    var div = document.querySelector('#invalid-group');\n    var group = value;\n    if (!groupRe.test(group)) {\n        div.style.display = 'block';\n    } else {\n        div.style.display = 'none';\n    }\n}\n\n//check the input data\nfunction validateFunc() {\n    var name = document.getElementById('name').value.toLowerCase();\n    var age = document.getElementById('age').value;\n    var email = document.getElementById('email').value;\n    var group = document.getElementById('group').value;\n\n    if (!nameRe.test(name) || !ageRe.test(age) || !emailRe.test(email) || !groupRe.test(group)) {\n\n        var msg = document.getElementById('messages');\n        while (msg.firstChild) {\n            msg.removeChild(msg.firstChild);\n        }\n        var p = document.createElement('p');\n        p.innerHTML = \"please fill correct values\";\n        msg.appendChild(p);\n        msg.style.display = 'block';\n        //sets time to display the msg\n        setTimeout(function () {\n            return msg.style.display = 'none';\n        }, 3000);\n    } else {\n\n        addFriendRequest();\n    }\n}\n\n//posting data to server\nfunction addFriendRequest() {\n    //creating xhr object\n    var xhr = new XMLHttpRequest();\n\n    //open the request\n    xhr.open('POST', '/api/add', true);\n\n    //response handler\n    xhr.onload = function () {\n        if (this.status == 200) {\n            var responseObject = null;\n            try {\n                responseObject = JSON.parse(this.responseText);\n            } catch (e) {\n                console.error('this could not parse');\n            }\n            handleResponse(responseObject);\n        }\n    };\n\n    //binding the input values in object to server\n    var name = document.getElementById('name').value.toLowerCase();\n    var age = document.getElementById('age').value;\n    var email = document.getElementById('email').value;\n    var group = document.getElementById('group').value;\n\n    //instantiating the object\n    var data = new Data(name, age, email, group);\n    console.log(data);\n\n    //this sets the content-type of data to server\n    xhr.setRequestHeader('Content-type', 'application/json');\n\n    //sending request to server\n    xhr.send(JSON.stringify(data));\n}\n\n// handling the response from server\nfunction handleResponse(responseObject) {\n    if (responseObject.ok) {\n        //friend data from server response\n        var friendsData = responseObject.myFriend;\n        successMsg = responseObject.msg;\n        errorMsg = responseObject.msg;\n        //storing the data to local\n        Store.addData(friendsData);\n\n        //redirect to friends page\n        location.hash = '#friends';\n    } else {\n        errorFunc(responseObject);\n    }\n}\n\n//error function\nfunction errorFunc(object) {\n    var responseObject = object;\n    var msg = document.getElementById('messages');\n    //if any child then removes that child\n    while (msg.firstChild) {\n        msg.removeChild(msg.firstChild);\n    }\n    // responseObject.errors.forEach(error => {\n    //     let li = document.createElement('p');\n    //     li.innerHTML = error.message;\n    //     msg.appendChild(li);\n    // });\n\n    //showing the errors to client\n    var errors = responseObject.errors;\n    for (i = 0; i < errors.length; i++) {\n        var p = document.createElement('p');\n        p.innerHTML = errors[i].message;\n        msg.appendChild(p);\n    }\n    msg.style.display = 'block';\n    //sets time to display the msg\n    setTimeout(function () {\n        return msg.style.display = 'none';\n    }, 3000);\n}\n\n//represent the data to create objects\n\nvar Data = function Data(name, age, email, group) {\n    _classCallCheck(this, Data);\n\n    this.name = name;\n    this.age = age;\n    this.email = email;\n    this.group = group;\n};\n\nfunction checkSuccessMsg() {\n    //check the messages\n    if (successMsg === 'undefined') return;\n    if (successMsg) {\n        UI.showMsg(successMsg);\n        successMsg = \"\";\n    }\n}\n\nfunction checkErrorMsg() {\n    //check the error msg\n    if (errorMsg === 'undefined') return;\n    if (errorMsg) {\n        UI.showMsg(errorMsg);\n        errorMsg = \"\";\n    }\n}\n//info about no friends available\n\nfunction infoFriends() {\n    var noFriendsDiv = document.createElement('div');\n    noFriendsDiv.className = 'no-friends';\n    noFriendsDiv.innerHTML = '\\n            <h3 id=\"info-friends\">No friends available!<br>if your interested in adding this friend to friends list,then click this<span class=\"add\" id=\"add\">ADD</span>or <span class=\"close\" id=\"close\">CLOSE</span></h3>\\n        ';\n    document.body.appendChild(noFriendsDiv);\n}\n\nfunction searchFilter(dataList) {\n    var friendsData = dataList.filter(function (friendData) {\n        var friendName = friendData.name.substr(0, 3);\n        return friendName === searchInput;\n    });\n    return friendsData;\n}\n\n//filter the data with searchInput\nfunction filterFriendsData(dataList) {\n    var friendsData = searchFilter(dataList);\n\n    if (friendsData.length === 0) {\n        while (document.querySelector('.no-friends')) {\n            var noFriendsDiv = document.querySelector('.no-friends');\n            document.body.removeChild(noFriendsDiv);\n        }\n        infoFriends();\n        Events.navigateToAdd();\n        Events.navigateToFriends();\n    } else {\n        if (document.querySelector('.no-friends')) {\n            var _noFriendsDiv = document.querySelector('.no-friends');\n            document.body.removeChild(_noFriendsDiv);\n        }\n        friendsData.forEach(function (friendData) {\n            UI.friendsDOM(friendData);\n        });\n        clearElement();\n        Events.clearSearchEvent();\n    }\n}\n//check the search input value and display\n\nfunction checksFriendsList(dataList) {\n    // check search input and display\n    if (searchInput) {\n        filterFriendsData(dataList);\n    } else {\n        dataList.forEach(function (friendData) {\n            UI.friendsDOM(friendData);\n        });\n    }\n}\n//display the data (ui)\n\nvar UI = function () {\n    function UI() {\n        _classCallCheck(this, UI);\n    }\n\n    _createClass(UI, null, [{\n        key: 'displayFriends',\n        value: function displayFriends() {\n\n            //getData method returns datalist with promise\n            var display = Store.getData();\n            //creating dom with data\n            display.then(function (dataList) {\n                checkSuccessMsg();\n                checkErrorMsg();\n                checksFriendsList(dataList);\n                Events.removeEvent();\n                Events.editEvent();\n            });\n        }\n\n        //adding the data to friends html\n\n    }, {\n        key: 'friendsDOM',\n        value: function friendsDOM(friendData) {\n            var container = document.querySelector('.grid-container');\n            var user = document.createElement('div');\n            user.className = 'user-detail';\n            user.id = friendData._id;\n            user.innerHTML = '<div class=\"imgBox\">\\n                   <img src=\"/images/pexels-photo-573299.jpeg\" alt=\"image\">\\n                </div>\\n                <div class=\"details\">\\n                    <h3>' + friendData.name + '</h3>\\n                    <h4>' + friendData.age + '</h4>\\n                    <h3>' + friendData.group + '</h3>\\n                    <input type=\"submit\" id=\"remove-btn\" value=\"remove\" data-id=' + friendData._id + ' action=\"delete\">\\n                    <input type=\"submit\" id=\"edit-btn\" value=\"edit\" data-id=' + friendData._id + ' action=\"edit\">\\n                </div>';\n            container.appendChild(user);\n        }\n\n        //updating friendsDom\n\n    }, {\n        key: 'updateFriendsDom',\n        value: function updateFriendsDom(updateData) {\n            if (updateData.friend) {\n                var _updateFriend = document.getElementById(updateData.friend._id);\n                _updateFriend.innerHTML = '<div class=\"imgBox\">\\n                   <img src=\"/images/pexels-photo-573299.jpeg\" alt=\"image\">\\n                </div>\\n                <div class=\"details\">\\n                    <h3>' + updateData.friend.name + '</h3>\\n                    <h4>' + updateData.friend.age + '</h4>\\n                    <h3>' + updateData.friend.group + '</h3>\\n                    <input type=\"submit\" id=\"remove-btn\" value=\"remove\" data-id=' + updateData.friend._id + ' action=\"delete\">\\n                    <input type=\"submit\" id=\"edit-btn\" value=\"edit\" data-id=' + updateData.friend._id + ' action=\"edit\">\\n                </div>';\n            }\n        }\n        //deletes the dom\n\n    }, {\n        key: 'deleteFriendDom',\n        value: function deleteFriendDom(element) {\n            //event target el is == remove btn\n            if (element.getAttribute('action')) {\n                element.parentElement.parentElement.remove();\n            }\n        }\n        // edit friend dom\n\n    }, {\n        key: 'displayEditFriend',\n        value: function displayEditFriend(editId) {\n            Store.getData().then(function (dataList) {\n                var friend = dataList.find(function (friendData) {\n                    return friendData._id === editId;\n                });\n                editFriendDom(friend);\n                getInputEvents();\n                Events.updateEvent();\n                Events.closeEvent();\n            }).catch(function (e) {\n                return console.log(e);\n            });\n        }\n\n        //showing messages to client\n\n    }, {\n        key: 'showMsg',\n        value: function showMsg(successMsg, errorMsg) {\n            var div = document.querySelector('#message-details');\n            while (div.firstChild) {\n                div.removeChild(div.firstChild);\n            }\n            var msg = document.createElement('p');\n            div.appendChild(msg);\n            msg.className = 'messages';\n            if (successMsg) {\n                msg.innerHTML = successMsg;\n                div.style.display = 'block';\n            } else {\n                msg.innerHTML = errorMsg;\n                div.style.display = 'block';\n            }\n            //time to display\n            setTimeout(function () {\n                return div.style.display = 'none';\n            }, 2000);\n            successMsg = \"\";\n        }\n    }]);\n\n    return UI;\n}();\n//local storage used to store the data\n\n\nvar Store = function () {\n    function Store() {\n        _classCallCheck(this, Store);\n    }\n\n    _createClass(Store, null, [{\n        key: 'getData',\n        value: function getData() {\n            return new Promise(function (resolve) {\n                var dataList = [];\n\n                //checking the storage\n                if (localStorage.getItem('friendsData') === null) {\n                    //gets data from server\n                    getFriendsData().then(function (friendsData) {\n                        dataList = friendsData;\n                        //stores the data to local\n                        localStorage.setItem('friendsData', JSON.stringify(dataList));\n                        resolve(dataList);\n                    }).catch(function (error) {\n                        return console.log(error);\n                    });\n                } else {\n                    //gets data from local store\n                    dataList = JSON.parse(localStorage.getItem('friendsData'));\n                    resolve(dataList);\n                }\n            });\n        }\n        //updating data to storage\n\n    }, {\n        key: 'addData',\n        value: function addData(friendsData) {\n            //gets datalist \n            Store.getData().then(function (dataList) {\n                //updating the data to local\n                dataList.unshift(friendsData);\n                localStorage.setItem('friendsData', JSON.stringify(dataList));\n            }).catch(function (error) {\n                return console.log(error);\n            });\n        }\n        // updating the local storage after deleting\n\n    }, {\n        key: 'removeData',\n        value: function removeData(friendId) {\n            //gets data list\n            Store.getData().then(function (dataList) {\n                var index = dataList.findIndex(function (friendData) {\n                    return friendData._id === friendId;\n                });\n                dataList.splice(index, 1);\n                localStorage.setItem('friendsData', JSON.stringify(dataList));\n            }).catch(function (error) {\n                return console.log(error);\n            });\n        }\n        //updating the store\n\n    }, {\n        key: 'updateStore',\n        value: function updateStore(updateData, updateId) {\n            Store.getData().then(function (dataList) {\n                var index = dataList.findIndex(function (friendData) {\n                    return friendData._id === updateId;\n                });\n                dataList.splice(index, 1, updateData.friend);\n                localStorage.setItem('friendsData', JSON.stringify(dataList));\n            });\n        }\n        //search data\n        // static searchStore(friends) {\n        //     localStorage.setItem('friendsData', JSON.stringify(friends));\n\n        // }\n\n    }]);\n\n    return Store;\n}();\n\n//getting friendsData from server\n\n\nfunction getFriendsData() {\n    //creating promise object\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', '/api/friends', true);\n\n        //response handler\n        xhr.onload = function () {\n            if (this.status == 200) {\n                //success\n                resolve(JSON.parse(this.responseText));\n            } else {\n                //failure\n                reject(this.statusText);\n            }\n        };\n        //error handler\n        xhr.onerror = function () {\n            reject(this.statusText);\n        };\n        xhr.send();\n    });\n}\n\n//remove event handler function\nvar removeFriend = function removeFriend(e) {\n    console.log(e.target);\n\n    //stops the  event bubbling\n    e.stopPropagation();\n\n    //gets the friend Id value from remove btn\n    var friendId = e.target.getAttribute('data-id');\n\n    //checking element\n    if (e.target.getAttribute('action') === 'delete') {\n\n        //calling delete method\n        deleteRequest(friendId).then(function (resultObj) {\n            if (resultObj.result.deletedCount === 1) {\n                //remove friend from UI\n                UI.deleteFriendDom(e.target);\n                // removes data from storage\n                Store.removeData(friendId);\n                var _successMsg = resultObj.message;\n                UI.showMsg(_successMsg);\n            } else {\n                var _errorMsg = resultObj.message;\n                UI.showMsg(_errorMsg);\n            }\n        }).catch(function (e) {\n            return console.log(e);\n        });\n    }\n};\n\n//delete request function\nfunction deleteRequest(friendId) {\n    return new Promise(function (resolve) {\n        // sends delete request to server\n        var xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            if (this.status == 200) {\n                var resultObj = null;\n                try {\n                    resultObj = JSON.parse(this.responseText);\n                } catch (e) {\n                    console.error('this could not parse');\n                }\n                resolve(resultObj);\n            }\n        };\n        xhr.open('DELETE', '/api/friends/' + friendId, true);\n        xhr.setRequestHeader('Content-type', 'application/json');\n        xhr.send();\n    });\n}\n//friend dom details\nfunction editFriendDom(friend) {\n    var popBox = document.createElement('div');\n    popBox.className = 'pop-container';\n    popBox.innerHTML = '<div class=\"input-container\">\\n             <div id=\"messages\" class=\"error-messages\"></div>\\n             <h2>Update your friend</h2>\\n             <label for=\"name\">Name</label>\\n             <input type=\"text\" id=\"name\" name=\"name\" value=\"' + friend.name + '\">\\n             <div id=\"invalid-name\">\\n                    <h4> name should be between 2 and 15</h4>\\n             </div>\\n             <label for=\"age\">Age</label>\\n             <input type=\"number\" id=\"age\" name=\"age\" value=\"' + friend.age + '\">\\n             <div id=\"invalid-age\">\\n                    <h4>please enter valid age</h4>\\n             </div>\\n             <label for=\"email\">Email</label>\\n             <input type=\"email\" id=\"email\" name=\"email\" value=\"' + friend.email + '\">\\n             <div id=\"invalid-email\">\\n                    <h4>please enter valid email address</h4>\\n             </div>\\n             <label for=\"group\">Group</label>\\n             <input type=\"text\" id=\"group\" name=\"group\" value=\"' + friend.group + '\">\\n             <div id=\"invalid-group\">\\n                    <h5>characters should be between 2 and 20</h5>\\n             </div>\\n             <input type=\"submit\" value=\"update\" action=\"update\" update-id=' + friend._id + ' id=\"update-btn\">\\n             <input type=\"submit\" value=\"close\" action=\"close\" id=\"close-btn\">\\n            </div>';\n    document.body.appendChild(popBox);\n}\n//edit event handler function\nvar editFriend = function editFriend(e) {\n    e.stopPropagation();\n    //e.preventDefault();\n    var editId = e.target.getAttribute('data-id');\n    if (e.target.getAttribute('action') === 'edit') {\n        UI.displayEditFriend(editId);\n    }\n};\n//checks  the update data\nfunction updateValidate(updateId) {\n    var name = document.getElementById('name').value.toLowerCase();\n    var age = document.getElementById('age').value;\n    var email = document.getElementById('email').value;\n    var group = document.getElementById('group').value;\n\n    if (!nameRe.test(name) || !ageRe.test(age) || !emailRe.test(email) || !groupRe.test(group)) {\n\n        var msg = document.getElementById('messages');\n        while (msg.firstChild) {\n            msg.removeChild(msg.firstChild);\n        }\n        var p = document.createElement('p');\n        p.innerHTML = \"please fill correct values\";\n        msg.appendChild(p);\n        msg.style.display = 'block';\n        //sets time to display the msg\n        setTimeout(function () {\n            return msg.style.display = 'none';\n        }, 3000);\n    } else {\n        updateRequest(updateId).then(function (updateObj) {\n            var updateData = updateObj;\n            if (updateData.friend) {\n                UI.updateFriendsDom(updateData);\n                Store.updateStore(updateData, updateId);\n                var popBox = document.querySelector('.pop-container');\n                document.body.removeChild(popBox);\n                var _successMsg2 = updateData.successMsg;\n                UI.showMsg(_successMsg2);\n            } else {\n                errorFunc(updateData);\n            }\n        });\n    }\n}\n//update event handler function\nvar updateFriend = function updateFriend(e) {\n    e.stopPropagation();\n    console.log(e.target);\n    var updateId = document.querySelector('#update-btn').getAttribute('update-id');\n    if (e.target.getAttribute('action') === 'update') {\n        updateValidate(updateId);\n    }\n};\n//put request to server\nfunction updateRequest(updateId) {\n    return new Promise(function (resolve) {\n        // sends delete request to server\n        var xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            if (this.status == 200) {\n                var updateObj = null;\n                try {\n                    updateObj = JSON.parse(this.responseText);\n                } catch (e) {\n                    console.error('this could not parse');\n                }\n                resolve(updateObj);\n            }\n        };\n        xhr.open('PUT', '/api/friends/' + updateId, true);\n        //update details to server\n        var name = document.getElementById('name').value.toLowerCase();\n        var age = document.getElementById('age').value;\n        var email = document.getElementById('email').value;\n        var group = document.getElementById('group').value;\n        var updateObject = {\n            name: name,\n            age: age,\n            email: email,\n            group: group\n        };\n        xhr.setRequestHeader('Content-type', 'application/json');\n        xhr.send(JSON.stringify(updateObject));\n    });\n}\n\n//closing the form\nvar closeForm = function closeForm(e) {\n    console.log(e.target);\n    e.stopPropagation();\n    if (e.target.getAttribute('action') === 'close') {\n        var popBox = document.querySelector('.pop-container');\n        document.body.removeChild(popBox);\n    }\n};\n\n//search event handler function\nvar searchFriend = function searchFriend(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    console.log(e.target);\n    searchInput = document.querySelector('#search').value.toLowerCase().substr(0, 3);\n\n    var re = /^[a-zA-Z]{2,25}/;\n    var div = document.querySelector('.invalid-search');\n    if (!re.test(searchInput)) {\n        div.style.display = 'block';\n    } else {\n        div.style.display = 'none';\n        // searchRequest(searchInput).then(friends => {\n        //     console.log(friends);\n        //     Store.searchStore(friends);\n        //     location.hash = \"#friends\";\n        // });\n        location.hash = \"#friends\";\n    }\n};\n//check the search value while typing\nvar checkSearch = function checkSearch(e) {\n    //console.log(e.type);\n    //check the pattern to search value\n    var re = /^[a-zA-Z]{1,25}/;\n    var div = document.querySelector('.invalid-search');\n    console.log(e.target.value);\n    if (!re.test(e.target.value)) {\n        div.style.display = 'block';\n    } else {\n        div.style.display = 'none';\n    }\n};\n//search request method to server\n// function searchRequest(searchInput) {\n//     return new Promise((resolve, reject) => {\n//         const xhr = new XMLHttpRequest();\n//         xhr.open('GET', `/api/search/${searchInput}`, true);\n\n//         //response handler\n//         xhr.onload = function() {\n//             if (this.status == 200) {\n//                 //success\n//                 resolve(JSON.parse(this.responseText));\n//             } else {\n//                 //failure\n//                 reject(this.statusText);\n//             }\n//         };\n//         //error handler\n//         xhr.onerror = function() {\n//             reject(this.statusText);\n//         };\n//         xhr.send();\n//     });\n// }\n\n//clear button element\n\nfunction clearElement() {\n    var clearDiv = document.createElement('div');\n    clearDiv.className = \"clearDiv\";\n    clearDiv.innerHTML = '\\n        <h4 class=\"info\">click the button to clear search history<span id=\"clearSearch\">CLEAR</span></h4 >\\n    ';\n    document.body.appendChild(clearDiv);\n}\n//clear search event handler\nvar clearSearchHistory = function clearSearchHistory() {\n    // console.log(e.target);\n    if (!searchInput) return;\n    Store.getData().then(function (dataList) {\n        if (searchInput) {\n            var friendsData = searchFilter(dataList);\n            //search data of friends and  removing the dom of  search of friends\n            friendsData.forEach(function (friendData) {\n                var container = document.querySelector('.grid-container');\n                var user = document.getElementById(friendData._id);\n                container.removeChild(user);\n            });\n            var clearDiv = document.querySelector('.clearDiv');\n            document.body.removeChild(clearDiv);\n            searchInput = \"\";\n        }\n        dataList.forEach(function (friendData) {\n            UI.friendsDOM(friendData);\n        });\n    });\n};\n\n//event handler for addPage\n\nvar directToAdd = function directToAdd() {\n    location.hash = \"#add\";\n    searchInput = \"\";\n};\n\n//event handler for addPage\nvar directToFriends = function directToFriends(e) {\n    console.log(e.target);\n    if (!searchInput) return;\n    if (searchInput) {\n        Store.getData().then(function (dataList) {\n            dataList.forEach(function (friendData) {\n                UI.friendsDOM(friendData);\n            });\n            searchInput = \"\";\n            var noFriendDiv = document.querySelector('.no-friends');\n            document.body.removeChild(noFriendDiv);\n        });\n    }\n};\n//event listener methods\n\nvar Events = function () {\n    function Events() {\n        _classCallCheck(this, Events);\n    }\n\n    _createClass(Events, null, [{\n        key: 'addEvent',\n\n        //add event\n        value: function addEvent() {\n            var submitBtn = document.getElementById('submit-btn');\n            submitBtn.addEventListener('click', addFriend);\n        }\n        //delete event\n\n    }, {\n        key: 'removeEvent',\n        value: function removeEvent() {\n            var removeData = document.querySelector('#friends-zone');\n            removeData.addEventListener('click', removeFriend);\n        }\n        //edit event\n\n    }, {\n        key: 'editEvent',\n        value: function editEvent() {\n            var editData = document.querySelector('#friends-zone');\n            editData.addEventListener('click', editFriend);\n        }\n    }, {\n        key: 'updateEvent',\n        value: function updateEvent() {\n            var updateData = document.querySelector('#update-btn');\n            updateData.addEventListener('click', updateFriend);\n        }\n    }, {\n        key: 'closeEvent',\n        value: function closeEvent() {\n            var closeBtn = document.querySelector('#close-btn');\n            closeBtn.addEventListener('click', closeForm);\n        }\n    }, {\n        key: 'searchEvent',\n        value: function searchEvent() {\n            var search = document.querySelector('#search-btn');\n            search.addEventListener('click', searchFriend);\n        }\n    }, {\n        key: 'searchInputEvent',\n        value: function searchInputEvent() {\n            var inputEvent = document.querySelector('#search');\n            inputEvent.addEventListener('keypress', checkSearch);\n        }\n    }, {\n        key: 'clearSearchEvent',\n        value: function clearSearchEvent() {\n            var clearSearch = document.querySelector('#clearSearch');\n            clearSearch.addEventListener('click', clearSearchHistory);\n        }\n        //events after search \n\n    }, {\n        key: 'navigateToAdd',\n        value: function navigateToAdd() {\n            var addPage = document.querySelector('#add');\n            addPage.addEventListener('click', directToAdd);\n        }\n    }, {\n        key: 'navigateToFriends',\n        value: function navigateToFriends() {\n            var friendsPage = document.querySelector('#close');\n            friendsPage.addEventListener('click', directToFriends);\n        }\n    }]);\n\n    return Events;\n}();\n\n//# sourceURL=webpack:///./src/app.js?");

/***/ })

/******/ });